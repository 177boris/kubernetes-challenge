# https://developer.hashicorp.com/terraform/tutorials/automation/github-actions

name: ECR-Terraform

on:
  push:
    branches: [main]
  pull_request: 


jobs:
  build-ecr-image:
    name: 'Build image'
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: AWS_ACCESS_KEY_ID
        aws-secret-access-key: AWS_SECRET_ACCESS_KEY
        aws-region: AWS_REGION

    - name: Build, tag, and push image to Amazon ECR
      id: docker-build
      run: |
        echo "building docker image"
        make docker/build
        echo "pushing image to ECR"
        make docker/push

    # - name: Run Trivy vulnerability scanner
    #   uses: aquasecurity/trivy-action@master
    #   with:
    #     image-ref: '\${{ steps.login-ecr.outputs.registry}}/\${{ steps.image-info.outputs.ecr_repository }}:\${{ steps.image-info.outputs.image_tag }}'
    #     format: 'table'
    #     exit-code: '0'
    #     ignore-unfixed: true
    #     vuln-type: 'os,library'
    #     severity: 'CRITICAL,HIGH'


  terraform:
      name: 'Terraform'
      runs-on: ubuntu-latest
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      defaults:
        run:
          working-directory: Terraform

      steps:  
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init 
        id: init 
        run: terraform init -migrate-state

      - name: Terraform format 
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform ensure formatting
        id: ensure-format
        if: steps.fmt.outcome == 'failure'
        run: terraform fmt

      - name: Terraform validate 
        id: validate 
        run: terraform validate -no-color 

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        continue-on-error: true

    #   - name: Terraform Apply
    #     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #     run: terraform apply -auto-approve -input=false
