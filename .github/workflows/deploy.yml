name: Terraform plan, build and push ECR image

on:
  push:
    branches: [main]

jobs:
  Terraform:
      name: Terraform
      runs-on: ubuntu-latest
      env: 
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      defaults:
        run:
          working-directory: Terraform

      steps:  
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init 
        id: init 
        run: terraform init -migrate-state

      - name: Terraform format 
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform ensure formatting
        id: ensure-format
        if: steps.fmt.outcome == 'failure'
        run: terraform fmt

      - name: Terraform validate 
        id: validate 
        run: terraform validate -no-color 

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false
        # continue-on-error: true

    #   - name: Terraform Apply
    #     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    #     run: terraform apply -auto-approve -input=false

  ECR-Build:
    name: Build-Push-ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get image tag(version)
        id: image
        run: |
          VERSION=$(echo \${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Build, tag, and push docker image to Amazon ECR
        id: build_image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

# ################################################################
#     steps:
#     - name: Check out the repo
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0 # Necessary to fetch all tags and history

# ################################################################
# ###               DETERMINE NEXT VERSION                     ###
# ###   Used for creating new releases and image tags          ###
# ################################################################

#     - name: Determine Next Version
#       id: next_version
#       run: |
#         # Fetch all tags
#         git fetch --tags
        
#         # Get the latest tag, assume semver, and sort.
#         LATEST_TAG=$(git tag -l | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
        
#         # If there's no tag yet, start with v0.0.0. Used for new repos
#         if [ -z "$LATEST_TAG" ]; then
#           LATEST_TAG="v0.0.0"
#         fi
        
#         # Increment the patch version
#         NEXT_TAG=$(echo $LATEST_TAG | awk -F. '{print $1"."$2"."$3+1}')
        
#         # Output the next version
#         echo "::set-output name=tag::$NEXT_TAG"
#         echo "Next version: $NEXT_TAG"


# ################################################################
# ###                     CREATE RELEASE                       ###
# ###  Creating release with the tag from the previous step    ###
# ################################################################

#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
#       with:
#         tag_name: ${{ steps.next_version.outputs.tag }}
#         release_name: Release ${{ steps.next_version.outputs.tag }}
#         draft: false
#         prerelease: false


# ################################################################
# ###                  BUILD DOCKER IMAGE                      ###
# ###         Build Docker image from the Dockefile            ###
# ################################################################

#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: eu-west-1

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Extract repository name
#       id: repo-name
#       run: |
#         REPO_NAME="${GITHUB_REPOSITORY##*/}"
#         echo "REPO_NAME=$REPO_NAME" >> $GITHUB_ENV
#         echo "::set-output name=repo_name::$REPO_NAME"

#     - name: Build Docker image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: ${{ env.REPO_NAME }}
#         IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         echo "IMAGE_NAME=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

#     - name: Push Docker image to Amazon ECR
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         ECR_REPOSITORY: counter-service-exercise
#         IMAGE_TAG: ${{ steps.next_version.outputs.tag }}
#       run: |
#         # Tag the image as latest
#         docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
#         # Push the specific version tag
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         # Push the latest tag
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

################################################################
#   # build-ecr-image:
#   #   name: 'Build image'
#   #   runs-on: ubuntu-latest
#   #   env:
#   #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   #     AWS_REGION: ${{ secrets.AWS_REGION }}
    
#   #   steps:
#   #   - name: Checkout
#   #     uses: actions/checkout@v4

#   #   - name: Configure AWS credentials
#   #     uses: aws-actions/configure-aws-credentials@v4
#   #     with:
#   #       aws-access-key-id: AWS_ACCESS_KEY_ID
#   #       aws-secret-access-key: AWS_SECRET_ACCESS_KEY
#   #       aws-region: AWS_REGION

#   #   - name: Build, tag, and push image to Amazon ECR
#   #     id: docker-build
#   #     run: |
#   #       echo "building docker image"
#   #       make docker/build
#   #       echo "pushing image to ECR"
#   #       make docker/push
