apiVersion: apps/v1
kind: Deployment
metadata:
  name: website-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: ecom-app
      tier: frontend
  revisionHistoryLimit: 5   # Keep config of 5 previous replicaset configs
  progressDeadlineSeconds: 120  # Wait up to 2 mins for pod replica to start before considering rollout to have stalled
  minReadySeconds: 5     # New replica must be up and running for 5 seconds, without any issues, before updating/replacing the next one in sequence
  template:
    metadata:
      labels:
        app: ecom-app
        tier: frontend
    # strategy:
    #   type: RollingUpdate 
    #   rollingUpdate:
    #     maxUnavailable: 1   # Never have more than one Pod below desired state
    #     maxSurge: 1         # Never have more than one Pod above desired state
    spec:
      containers:
        - name: php
          image: 533267165479.dkr.ecr.eu-west-2.amazonaws.com/k8s-resume-challenge:v2.0
          imagePullPolicy: Always
          resources: {}
          ports:
            - name: http
              containerPort: 80
          env:
          - name: DB_HOST
            value: "mysql-service"
          - name: DB_USER
            valueFrom:
              configMapKeyRef:
                name: mariadb-config
                key: mysql_user
          - name: DB_NAME
            valueFrom:
              configMapKeyRef:
                name: mariadb-config
                key: mysql_db
          - name: DB_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mariadb-secret
                key: mysql_password
          - name: FEATURE_DARK_MODE
            valueFrom:
              configMapKeyRef:
                name: feature-toggle-config
                key: FEATURE_DARK_MODE
          - name: MESSAGE
            value: "Hello k8s world!"
          readinessProbe:
            httpGet:
              path: /ready.php
              port: 80
            initialDelaySeconds: 10 # Wait 10 seconds before starting probes
            periodSeconds: 30 # Check every 30 seconds
            failureThreshold: 2 # Mark unhealthy after 2 consecutive failures
          livenessProbe:
            httpGet:
              path: /health-check.php
              port: 80
            initialDelaySeconds: 10 # Wait 10 seconds before starting probes
            periodSeconds: 5 # Check every 5 seconds
            failureThreshold: 2 # Mark unhealthy after 2 consecutive failures
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 10"] # prevent downtime on rolling deployments, requests aren't sent too early
        